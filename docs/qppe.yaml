openapi: 3.0.3
info:
  title: QPPE API
  version: 0.1.0
servers:
  - url: 'https://example.org/api/qppe/v0'
paths:
  /packages:
    parameters:
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request package information in these languages. This endpoint tries to deliver the content in all
          given languages.
        schema:
          type: string
    get:
      summary: Get all available packages
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PackageInfo"

  /packages/{package_hash}:
    parameters:
      - name: package_hash
        in: path
        required: true
        description: SHA256 hash of package
        schema:
          type: string
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request package information in these languages. This endpoint tries to deliver the content in all
          given languages.
        schema:
          type: string
    get:
      summary: Get a specific package by its hash
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageInfo"
        404:
          description: Not Found
    post:
      summary: Get package information
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                package:
                  type: string
                  format: binary
                  description: QuestionPy Package
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageInfo"

  /packages/{package_hash}/options:
    parameters:
      - name: package_hash
        in: path
        required: true
        description: SHA256 hash of package
        schema:
          type: string
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request messages in one of these languages. The server will indicate the chosen language in the
          Content-Language response header field.
        schema:
          type: string
    post:
      summary: Get the options form definition that allow a question creator to customize a question.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionStateHash"
          multipart/form-data:
            schema:
              type: object
              properties:
                main:
                  $ref: "#/components/schemas/QuestionStateHash"
                package:
                  type: string
                  format: binary
                  description: question package
                question_state:
                  type: string
                  description: Question state that was previously returned by the question endpoint or empty
                    in order to show default option values.
              required: [ main ]
      responses:
        200:
          description: Definition that can be used in order to display a form.
          headers:
            Content-Language:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  definition:
                    $ref: "#/components/schemas/OptionsFormDefinition"
                  form_data:
                    $ref: "#/components/schemas/FormData"
                required: [ definition, form_data ]
        404:
          description: Package not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageQuestionStateNotFound"

  /packages/{package_hash}/question:
    parameters:
      - name: package_hash
        in: path
        required: true
        description: SHA256 hash of package
        schema:
          type: string
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request messages in one of these languages. The server will indicate the chosen language in the
          Content-Language response header field.
        schema:
          type: string
    post:
      summary: Create a new question (validate the options as set by a question creator and export to a question state).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionCreateArguments"
          multipart/form-data:
            schema:
              type: object
              properties:
                package:
                  type: string
                  format: binary
                  description: question package
                question_state:
                  type: string
                  description: Question state that was previously returned by the question endpoint.
                main:
                  $ref: "#/components/schemas/QuestionCreateArguments"
              required: [ main ]
      responses:
        201:
          description: Successful
          headers:
            Content-Language:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        400:
          description: Validation error
          headers:
            Content-Language:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
        404:
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageQuestionStateNotFound"

  /packages/{package_hash}/question/migrate:
    parameters:
      - name: package_hash
        in: path
        required: true
        description: SHA256 hash of package
        schema:
          type: string
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request messages in one of these languages. The server will indicate the chosen language in the
          Content-Language response header field.
        schema:
          type: string
    post:
      summary: Migrate/update question state that was created by another package or another version.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: Question state that was created by another package or another version.
          multipart/form-data:
            schema:
              type: object
              properties:
                package:
                  type: string
                  format: binary
                  description: question package
                question_state:
                  type: string
                  description: Question state that was created by another package or another version.
              required: [ question_state ]
      responses:
        200:
          description: Successfully updated data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        400:
          description: Question state migration error
          headers:
            Content-Language:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionStateMigrationError"
        404:
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageQuestionStateNotFound"

  /packages/{package_hash}/attempt/start:
    parameters:
      - name: package_hash
        in: path
        required: true
        description: SHA256 hash of package
        schema:
          type: string
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request messages in one of these languages. The server will indicate the chosen language in the
          Content-Language response header field.
        schema:
          type: string
    post:
      summary: Start an attempt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttemptStartArguments"
          multipart/form-data:
            schema:
              type: object
              properties:
                main:
                  $ref: "#/components/schemas/AttemptStartArguments"
                package:
                  type: string
                  format: binary
                  description: question package
                question_state:
                  type: string
                  description: Question state that was previously returned by the question endpoint.
              required: [ main ]
      responses:
        201:
          description: Attempt started data
          headers:
            Content-Language:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttemptStarted"
        404:
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageQuestionStateNotFound"

  /packages/{package_hash}/attempt/view:
    parameters:
      - name: package_hash
        in: path
        required: true
        description: SHA256 hash of package
        schema:
          type: string
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request messages in one of these languages. The server will indicate the chosen language in the
          Content-Language response header field.
        schema:
          type: string
    post:
      summary: View an attempt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttemptViewArguments"
          multipart/form-data:
            schema:
              type: object
              properties:
                main:
                  $ref: "#/components/schemas/AttemptViewArguments"
                package:
                  type: string
                  format: binary
                  description: question package
                question_state:
                  type: string
                  description: Question state that was previously returned by the question endpoint.
              required: [ main ]
      responses:
        201:
          description: Attempt view data
          headers:
            Content-Language:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attempt"

  /packages/{package_hash}/attempt/score:
    parameters:
      - name: package_hash
        in: path
        required: true
        description: SHA256 hash of package
        schema:
          type: string
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request messages in one of these languages. The server will indicate the chosen language in the
          Content-Language response header field.
        schema:
          type: string
    post:
      summary: Score an attempt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttemptScoreArguments"
          multipart/form-data:
            schema:
              type: object
              properties:
                main:
                  $ref: "#/components/schemas/AttemptScoreArguments"
                package:
                  type: string
                  format: binary
                  description: question package
                question_state:
                  type: string
                  description: Question state that was previously returned by the question endpoint.
              required: [ main ]
      responses:
        201:
          description: Scored attempt data
          headers:
            Content-Language:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttemptScored"

  /package-extract-info:
    parameters:
      - name: User-Agent
        in: header
        description: Name and version of the QPPE client software.
        example: moodle-qtype_questionpy/1.0
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: Request package information in these languages. This endpoint tries to deliver the content in all
          given languages.
        schema:
          type: string
    post:
      summary: Post a new package to the server and extract package info.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                package:
                  type: string
                  format: binary
                  description: QuestionPy Package
              required: [ package ]
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageInfo"
        400:
          description: Bad Request


components:
  schemas:
    PackageInfo:
      type: object
      properties:
        package_hash:
          type: string
          description: SHA256 hash of package zip
          example: bf6f896
        short_name:
          type: string
          example: multiple_choice
        namespace:
          type: string
          example: default
        name:
          type: object
          example:
            en: Multiple Choice
            de: Mehrfachauswahl
        version:
          type: string
          format: semver
          # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          example: 0.1.0
        type:
          type: string
          enum:
            - LIBRARY
            - QUESTIONTYPE
            - QUESTION
        author:
          type: string
        url:
          type: string
          nullable: true
          default: null
        languages:
          type: array
          items:
            type: string
          default: []
        description:
          type: object
          default: {}
          example:
            en: Multiple Choice
            de: Mehrfachauswahl
        icon:
          type: string
          format: uri
          nullable: true
          default: null
          example: "https://example.org/favicon.ico"
        license:
          type: string
          nullable: true
          default: null
        tags:
          type: array
          default: []
      required: [ package_hash, short_name, namespace, name, version, type, author ]

    OptionsFormDefinition:
      type: object
      properties:
        general:
          type: array
          description: Elements to add to the general settings section
          default: []
          items:
            $ref: "#/components/schemas/FormElement"
        sections:
          type: array
          description: Custom sections
          default: []
          items:
            type: object
            properties:
              header:
                type: string
              elements:
                type: array
                items:
                  $ref: "#/components/schemas/FormElement"
            required: [ header, elements ]

    FormData:
      type: object
      description: Mapping of element names to their current values. The value of containers of elements, such as
        sections and groups, is a nested mapping of their contained element values. Some elements such as repetitions 
        and multi-selects may also produce arrays as their values.
      additionalProperties: true
      example:
        my_section:
          my_group:
            my_input: text value
          my_checkbox: true
          my_multi_select:
            - OPT_1
            - OPT_2

    QuestionStateHash:
      type: object
      properties:
        question_state_hash:
          type: string
          description: SHA256 hash of question state JSON data
        context:
          type: integer
          description: Some context information where the question is located (e.g. course or quiz/test id).
          nullable: true
          default: null
      required: [ question_state_hash ]

    OptionalQuestionStateHash:
      type: object
      properties:
        question_state_hash:
          type: string
          description: SHA256 hash of question state JSON data
          nullable: true
        context:
          type: integer
          description: Some context information where the question is located (e.g. course or quiz/test id).
          nullable: true
          default: null

    QuestionCreateArguments:
      description: Information that is needed to create a new question.
      allOf:
        - $ref: "#/components/schemas/OptionalQuestionStateHash"
        - type: object
          properties:
            form_data:
              $ref: "#/components/schemas/FormData"
          required: [ form_data ]

    Question:
      type: object
      properties:
        question_state:
          type: string
          description: Arbitrary values set by the question package code (LMS must store this data unmodified)
        question_state_hash:
          type: string
          description: SHA256 hash of question state JSON data
        num_variants:
          type: integer
          minimum: 1
          description: Number of available variants of this question.
        num_subquestions:
          type: integer
          minimum: 1
          description: Maximum number of subquestions that this question can have.
        score_min:
          type: number
          format: double
        score_max:
          type: number
          format: double
        scoring_method:
          type: string
          enum:
            - ALWAYS_MANUAL_SCORING_REQUIRED
            - AUTOMATICALLY_SCORABLE
            - AUTOMATICALLY_SCORABLE_WITH_COUNTBACK
          description: AUTOMATICALLY_SCORABLE_WITH_COUNTBACK means the package is able to compute a final score,
            taking into account previous submissions to this question.
        penalty:
          type: number
          nullable: true
          format: double
          description: Penalty factor (fraction that is subtracted from the score after each failed attempt,
            might be used when package cannot compute a final score).
        random_guess_score:
          type: number
          nullable: true
          format: double
          description: Average expected score when the response is just selected randomly.
        subquestions:
          type: array
          nullable: true
          description: Listing of subquestions if the question consists of subquestions.
          items:
            type: object
            properties:
              subquestion_id:
                type: string
                maxLength: 30
              score_max:
                type: number
                format: double
                nullable: true
                description: Maximum score. May be null if no score can be assigned directly to this
                  specific subquestion.
              response_classes:
                type: array
                nullable: true
                description: All the possible types of responses per subquestion. This is used for
                  statistics in order to classify responses. Can be null if question does not
                  support a response analysis.
                items:
                  type: object
                  properties:
                    response_class:
                      type: string
                      maxLength: 30
                    score:
                      type: number
                      format: double
                  required: [ response_class, score ]
            required: [ subquestion_id, score_max, response_classes ]
        response_analysis_by_variant:
          type: boolean
          description: If true, the LMS should break down the stats and response analysis by the question variant.
        render_every_view:
          type: boolean
          description: The question UI should not be cached and every view should be rendered by the package.
          default: false
        general_feedback:
          type: string
          nullable: true
          description: General feedback that is shown to everyone after scoring.
      required: [ question_state, question_state_hash, num_variants, num_subquestions, score_min,
                  score_max, scoring_method, penalty, random_guess_score, subquestions,
                  response_analysis_by_variant, render_every_view, general_feedback ]

    AttemptStartArguments:
      allOf:
        - $ref: "#/components/schemas/QuestionStateHash"
        - type: object
          properties:
            variant:
              type: integer
              minimum: 1
              description: Which variant of this question to start, between 1 and question.num_variants.
          required: [ variant ]

    Attempt:
      type: object
      properties:
        variant:
          type: integer
          minimum: 1
          description: Which variant of this question, between 1 and question.num_variants.
        question_summary:
          type: string
          nullable: true
          default: null
          description: Plain-text summary of the question.
        right_answer_summary:
          type: string
          nullable: true
          default: null
          description: Plain-text summary of the right answer.
        ui:
          type: object
          properties:
            fields:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
                    description: Type of the input field.
                  default:
                    type: string
                    nullable: true
                  validation_regex:
                    type: string
                    nullable: true
                    description: Validate response with this regex. If the response does not match, the response might not be scorable.
                  required:
                    type: boolean
                    description: This field is required. Otherwise the response will not be scorable.
                  correct_response:
                    type: string
                    nullable: true
                required: [ name, type, default, validation_regex, required, correct_response ]
            text:
              type: string
              format: text/html
              description: Answer input area
              example: '<label>Enter your answer: <input type="text"/></label>'
            include_inline_css:
              type: string
              nullable: true
            include_css_file:
              type: string
              nullable: true
            include_javascript_modules:
              type: array
              default: []
              items:
                type: string
            call_javascript:
              type: array
              default: []
              items:
                type: object
                properties:
                  module:
                    type: string
                  function:
                    type: string
                  args:
                    type: string
                required: [ module, function, args ]
            files:
              type: array
              default: []
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: file name
                  data:
                    type: string
                    format: base64
                    description: file data
                  mime_type:
                    type: string
                    nullable: true
                required: [ name, data, mime_type ]
          required: [ fields, text ]
          readOnly: true
      required: [ variant, ui ]

    AttemptStarted:
      allOf:
        - type: object
          properties:
            attempt_state:
              type: string
              description: Arbitrary values set by the question package code (LMS must store this data unmodified).
          required: [ attempt_state ]
        - $ref: "#/components/schemas/Attempt"

    AttemptViewArguments:
      allOf:
        - $ref: "#/components/schemas/QuestionStateHash"
        - type: object
          properties:
            attempt_state:
              type: string
              description: Arbitrary values set by the question package code.
            scoring_state:
              type: string
              nullable: true
              description: Arbitrary values set by the question package code (has to be passed
                when the attempt was already scored).
            response:
              type: object
              nullable: true
              description: Data from the question's input fields.
          required: [ attempt_state, scoring_state, response ]

    AttemptScoreArguments:
      # nested subquestions
      allOf:
        - $ref: "#/components/schemas/QuestionStateHash"
        - $ref: "#/components/schemas/AttemptViewArguments"
        - type: object
          properties:
            responses:
              type: array
              nullable: true
              default: null
              items:
                type: object
                properties:
                  response:
                    type: object
              description: All tries and their data from the question's input fields
                (only when question.scoring_method is AUTOMATICALLY_SCORABLE_WITH_COUNTBACK).
            generate_hint:
              type: boolean
              description: Try to give a hint on how to improve the response.
          required: [ generate_hint ]

    AttemptScored:
      allOf:
        - type: object
          properties:
            scoring_state:
              type: string
              nullable: true
              description: Arbitrary values set by the question package code (LMS must store this data unmodified).
            scoring_code:
              type: string
              enum:
                - AUTOMATICALLY_SCORED
                - NEEDS_MANUAL_SCORING
                - RESPONSE_NOT_SCORABLE
                - INVALID_RESPONSE
            score:
              type: number
              nullable: true
              format: double
              description: A fraction between question.score_min_fraction and question.score_max_fraction.
            specific_feedback:
              type: string
              nullable: true
              default: null
              description: Might be null when there is no specific feedback or the specific feedback is shown inline
                within the question text.
            hint:
              type: string
              nullable: true
              default: null
              description: Null if LMS has not requested a hint in AttemptScoreArguments.generate_hint or if no
                hint is available.
            more_hints_available:
              type: boolean
              nullable: true
              default: null
              description: The question package is able to give at least one more hint. Null if no hint has been
                requested or if the package is not able to tell whether there are more hints.
            response_summary:
              type: string
              nullable: true
              default: null
              description: This is a plain-text summary of the response.
            classification:
              type: array
              nullable: true
              default: null
              description: Classified response per subquestion. Can be null if question does not support
                a response analysis. Must correspond to question.subquestions.
              items:
                type: object
                properties:
                  subquestion_id:
                    type: string
                    maxLength: 30
                  response_class:
                    type: string
                    maxLength: 30
                  response:
                    type: string
                    description: Actual response to this subquestion given by user.
                  score:
                    type: number
                    format: double
                required: [ subquestion_id, response_class, response, score ]
            scored_fields:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  name:
                    type: string
                  correct:
                    type: boolean
                    nullable: true
                  score:
                    type: number
                    format: double
                    nullable: true
                  max_score:
                    type: number
                    format: double
                    nullable: true
                  feedback:
                    type: string
                    nullable: true
                required: [ name, correct, score, max_score, feedback ]
              description: Give specific feedback
          required: [ scoring_state, scoring_code, score ]
        - $ref: "#/components/schemas/Attempt"

    PackageQuestionStateNotFound:
      type: object
      properties:
        package_not_found:
          type: boolean
        question_state_not_found:
          type: boolean
      required: [ package_not_found, question_state_not_found ]

    QuestionStateMigrationError:
      type: object
      properties:
        code:
          type: string
          enum:
            - NOT_IMPLEMENTED
            - DOWNGRADE_NOT_POSSIBLE
            - PACKAGE_MISMATCH
            - CURRENT_QUESTION_STATE_INVALID
            - MAJOR_VERSION_MISMATCH
            - OTHER_ERROR
        reason:
          type: string
          nullable: true
          default: null
          description: Human-readable reason why the error occurred.
      required: [ code ]

    FormLabel:
      type: string
      description: The displayed label for this form element

    FormName:
      type: string
      pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
      description: The key of the form data field produced by this form element

    StaticTextElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ static_text ]
        label:
          $ref: "#/components/schemas/FormLabel"
        text:
          type: string
          description: Static text to display
      required: [ kind, label, text ]

    TextInputElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ input ]
        label:
          $ref: "#/components/schemas/FormLabel"
        name:
          $ref: "#/components/schemas/FormName"
        required:
          type: boolean
          default: false
        default:
          type: string
          description: The initial value in this element, if any
          nullable: true
          default: null
        placeholder:
          type: string
          description: Text to show while no value is entered
          nullable: true
          default: null
      required: [ kind, label, name ]

    CheckboxElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ checkbox ]
        left_label:
          type: string
          description: A label displayed to the left of the checkbox
          nullable: true
          default: null
        right_label:
          type: string
          description: A label displayed to the right of the checkbox
          nullable: true
          default: null
        name:
          $ref: "#/components/schemas/FormName"
        required:
          type: boolean
          default: false
        selected:
          type: boolean
          description: Whether this checkbox is initially selected
          default: false
      required: [ kind, name ]

    CheckboxGroupElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ checkbox_group ]
        checkboxes:
          type: array
          items:
            $ref: "#/components/schemas/CheckboxElement"
          minItems: 1
      required: [ kind, checkboxes ]

    RadioGroupElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ radio_group ]
        label:
          $ref: "#/components/schemas/FormLabel"
        name:
          $ref: "#/components/schemas/FormName"
        options:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              value:
                type: string
              selected:
                type: string
                description: Whether this option is initially selected
                default: false
            required: [ label, value ]
          minItems: 1
        required:
          type: boolean
          default: false
      required: [ kind, label, name, options ]

    SelectElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ select ]
        label:
          $ref: "#/components/schemas/FormLabel"
        name:
          $ref: "#/components/schemas/FormName"
        options:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              value:
                type: string
              selected:
                type: boolean
                description: Whether this option is initially selected
                default: false
            required: [ label, value ]
          minItems: 1
        multiple:
          type: boolean
          default: false
        required:
          type: boolean
          default: false
      required: [ kind, label, name, options ]

    HiddenElement:
      type: object
      description: Pseudo-element which is not shown at all but adds a fixed value to the form data
      properties:
        kind:
          type: string
          enum: [ hidden ]
        name:
          $ref: "#/components/schemas/FormName"
        value:
          type: string
      required: [ kind, name, value ]

    GroupElement:
      type: object
      description: Groups arbitrary elements with a common label
      properties:
        kind:
          type: string
          enum: [ group ]
        label:
          $ref: "#/components/schemas/FormLabel"
        elements:
          type: array
          items:
            $ref: "#/components/schemas/FormElement"
          minItems: 1
      required: [ kind, label, elements ]

    FormElement:
      oneOf:
        - $ref: "#/components/schemas/StaticTextElement"
        - $ref: "#/components/schemas/TextInputElement"
        - $ref: "#/components/schemas/CheckboxElement"
        - $ref: "#/components/schemas/CheckboxGroupElement"
        - $ref: "#/components/schemas/RadioGroupElement"
        - $ref: "#/components/schemas/SelectElement"
        - $ref: "#/components/schemas/HiddenElement"
        - $ref: "#/components/schemas/GroupElement"
