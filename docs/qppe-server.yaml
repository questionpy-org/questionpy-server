openapi: 3.0.3
info:
  title: Question Provider and Package Execution (QPPE) Server API
  version: 0.1.0
servers:
  - url: 'https://example.org/api/qppe/v0'
paths:
  /packages:
    parameters:
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageAll'
    get:
      summary: Get all available packages
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PackageInfo"

  /packages/{package_hash}:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageAll'
    get:
      summary: Get a specific package info by its hash
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageInfo"
        404:
          description: Not Found

  /packages/{package_hash}/options:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageOne'
    post:
      summary: Get the options form definition that allow a question creator to customize a question.
      description: "Within the request data, `question_ref` should be null in order to show default option values.
        `lms_auth_token` should provide access to the following QPPE LMS Callback API security schemes:
        AuthPackageAccess and AuthQuestionAccess (if `question_ref` is not null)."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestBaseData"
      responses:
        200:
          description: Definition that can be used in order to display a form.
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                type: object
                properties:
                  definition:
                    $ref: "#/components/schemas/OptionsFormDefinition"
                  form_data:
                    $ref: "#/components/schemas/FormData"
                required: [ definition, form_data ]
        404:
          description: Package or question_state not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStatus"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /packages/{package_hash}/question:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageOne'
    post:
      summary: Create a new question (validate the options as set by a question creator and export to a question state).
      description: "Within the request data, `old_question_ref` should refer to the old question version when the teacher
        modifies an existing question (otherwise null) and `question_ref` should refer to the new question (version).
        `lms_auth_token` should provide access to the following QPPE LMS Callback API security schemes:
        AuthPackageAccess, AuthNewQuestionCreate and AuthQuestionAccess (if `old_question_ref` is not null)."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionCreateArguments"
      responses:
        201:
          description: Successful
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionCreated"
        400:
          description: Validation error
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                type: object
        404:
          description: Package or question_state not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStatus"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /packages/{package_hash}/question/migrate:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageOne'
    post:
      summary: Migrate/update question state that was created by another package or another version.
      description: "Within the request data, `lms_auth_token` should provide access to the following
        QPPE LMS Callback API security schemes: AuthPackageAccess, AuthQuestionAccess and AuthNewQuestionCreate."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionMigrateArguments"
      responses:
        200:
          description: Successfully updated data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionCreated"
        400:
          description: Question state migration error
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionStateMigrationError"
        404:
          description: Package or question_state not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStatus"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /packages/{package_hash}/question/view:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageOne'
    post:
      summary: View a question.
      description: "Within the request data, `lms_auth_token` should provide access to the following
        QPPE LMS Callback API security schemes: AuthPackageAccess and AuthQuestionAccess."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestBaseData"
      responses:
        200:
          description: OK
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        404:
          description: Package or question_state not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStatus"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /packages/{package_hash}/attempt/start:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageOne'
    post:
      summary: Start an attempt
      description: "Within the request data, `lms_auth_token` should provide access to the following
        QPPE LMS Callback API security schemes: AuthPackageAccess, AuthQuestionAccess and AuthQuestionAttemptAccess."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttemptStartArguments"
      responses:
        201:
          description: Attempt started data
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttemptStarted"
        404:
          description: Package or question_state not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStatus"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /packages/{package_hash}/attempt/view:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageOne'
    post:
      summary: View an attempt
      description: "Within the request data, `lms_auth_token` should provide access to the following
        QPPE LMS Callback API security schemes: AuthPackageAccess, AuthQuestionAccess and AuthQuestionAttemptAccess."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttemptViewArguments"
      responses:
        200:
          description: Attempt view data
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attempt"
        404:
          description: Package or question_state not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStatus"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /packages/{package_hash}/attempt/score:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageOne'
    post:
      summary: Score an attempt synchronously/asynchronously.
      description: "Within the request data, `lms_auth_token` should provide access to the following
        QPPE LMS Callback API security schemes: AuthPackageAccess, AuthQuestionAccess, AuthQuestionAttemptAccess and
        AuthResponseScoreWrite."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttemptScoreArguments"
      responses:
        200:
          description: Scored attempt data
          headers:
            Content-Language:
              $ref: '#/components/headers/ContentLanguage'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttemptScored"
        202:
          description: Attempt will be scored asynchronously.
          content:
            application/json:
              schema:
                type: object
                properties:
                  scoring_job_uuid:
                    type: string
                    description: Async scoring job uuid.
                required: [ scoring_job_uuid ]
        404:
          description: Package or question_state not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStatus"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /packages/{package_hash}/attempt/score/{scoring_job_uuid}:
    parameters:
      - $ref: '#/components/parameters/PackageHash'
      - $ref: '#/components/parameters/ScoringUUID'
      - $ref: '#/components/parameters/UserAgent'
    get:
      summary: Get status of an asynchronous scoring job.
      responses:
        200:
          description: status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttemptAsyncScoringStatus'
        404:
          description: Job not found.
    delete:
      summary: Cancel an asynchronous scoring job.
      responses:
        204:
          description: Job cancelled.
        404:
          description: Job not found.

  /package-extract-info:
    parameters:
      - $ref: '#/components/parameters/UserAgent'
      - $ref: '#/components/parameters/AcceptLanguageAll'
    post:
      summary: Post a new package to the server and extract package information.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                package:
                  type: string
                  format: binary
                  description: QuestionPy Package
              required: [ package ]
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageInfo"
        500:
          description: Error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestError"

  /status:
    parameters:
      - $ref: '#/components/parameters/UserAgent'
    get:
      summary: Get information about the server status
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerStatus"

components:
  parameters:
    PackageHash:
      name: package_hash
      in: path
      required: true
      description: SHA256 hash of package
      schema:
        type: string

    ScoringUUID:
      name: scoring_job_uuid
      in: path
      required: true
      description: Scoring job UUID that was returned by the /attempt/score endpoint.
      schema:
        type: string
        pattern: '^[a-zA-Z0-9\-_=]{1,64}$'

    UserAgent:
      name: User-Agent
      in: header
      description: Name and version of the QPPE client software.
      example: moodle-qtype_questionpy/1.0
      schema:
        type: string

    AcceptLanguageAll:
      name: Accept-Language
      in: header
      required: true
      description: Request package information in these languages. This endpoint tries to deliver the content in all
        given languages.
      schema:
        type: string

    AcceptLanguageOne:
      name: Accept-Language
      in: header
      required: true
      description: Request messages in one of these languages. The server will indicate the chosen language in the
        Content-Language response header field.
      schema:
        type: string

  headers:
    ContentLanguage:
      required: true
      schema:
        type: string

  schemas:
    PackageInfo:
      type: object
      properties:
        package_hash:
          type: string
          description: SHA256 hash of package zip
          example: bf6f896
        short_name:
          type: string
          example: multiple_choice
        namespace:
          type: string
          example: default
        name:
          type: object
          example:
            en: Multiple Choice
            de: Mehrfachauswahl
        version:
          type: string
          format: semver
          # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          example: 0.1.0
        type:
          type: string
          enum:
            - LIBRARY
            - QUESTIONTYPE
            - QUESTION
        author:
          type: string
        url:
          type: string
          nullable: true
          default: null
        languages:
          type: array
          items:
            type: string
          default: [ ]
        description:
          type: object
          default: { }
          example:
            en: Multiple Choice
            de: Mehrfachauswahl
        icon:
          type: string
          format: uri
          nullable: true
          default: null
          example: "https://example.org/favicon.ico"
        license:
          type: string
          nullable: true
          default: null
        tags:
          type: array
          default: [ ]
      required: [ package_hash, short_name, namespace, name, version, type, author ]

    OptionsFormDefinition:
      type: object
      properties:
        general:
          type: array
          description: Elements to add to the general settings section
          default: [ ]
          items:
            $ref: "#/components/schemas/FormElement"
        sections:
          type: array
          description: Custom sections
          default: [ ]
          items:
            $ref: "#/components/schemas/FormSection"

    FormData:
      type: object
      description: Mapping of element names to their current values. The value of containers of elements, such as
        sections and groups, is a nested mapping of their contained element values. Some elements such as repetitions
        and multi-selects may also produce arrays as their values.
      additionalProperties: true
      example:
        my_section:
          my_group:
            my_input: text value
          my_checkbox: true
          my_multi_select:
            - OPT_1
            - OPT_2

    RequestBaseData:
      type: object
      properties:
        question_ref:
          allOf:
            - $ref: 'qppe-lms.yaml#/components/schemas/QuestionRef'
            - nullable: true
        context:
          type: integer
          description: Some context information where the question is located (e.g. course or quiz/test id).
          nullable: true
          default: null
        callback_url:
          type: string
          format: uri
          description: Base URL to LMS Callback API.
        lms_auth_token:
          type: string
          description: Token that is needed to access the LMS Callback API.
          nullable: true
        local_package:
          type: boolean
          description: True if the LMS is able to return the .qpy file through the LMS Callback API.
      required: [ question_ref, context, callback_url, lms_auth_token, local_package ]

    QuestionCreateArguments:
      description: Information that is needed to create a new question.
      allOf:
        - $ref: "#/components/schemas/RequestBaseData"
        - type: object
          properties:
            old_question_ref:
              allOf:
                - $ref: 'qppe-lms.yaml#/components/schemas/QuestionRef'
                - nullable: true
            form_data:
              $ref: "#/components/schemas/FormData"
          required: [ old_question_ref, form_data ]

    QuestionMigrateArguments:
      description: Information that is needed to migrate a question.
      allOf:
        - $ref: "#/components/schemas/RequestBaseData"
        - type: object
          properties:
            old_question_ref:
              $ref: 'qppe-lms.yaml#/components/schemas/QuestionRef'
          required: [ old_question_ref ]

    QuestionViewArguments:
      description: Information that is needed to view a question.
      allOf:
        - $ref: "#/components/schemas/RequestBaseData"
        - type: object
          properties:
            attempt_ref:
              $ref: 'qppe-lms.yaml#/components/schemas/AttemptRef'
            response_ref:
              $ref: 'qppe-lms.yaml#/components/schemas/ResponseRef'
          required: [ question_state ]

    Question:
      type: object
      properties:
        num_variants:
          type: integer
          minimum: 1
          description: Number of available variants of this question.
        num_subquestions:
          type: integer
          minimum: 1
          description: Maximum number of subquestions that this question can have.
        score_min:
          type: number
          format: double
        score_max:
          type: number
          format: double
        scoring_method:
          type: string
          enum:
            - ALWAYS_MANUAL_SCORING_REQUIRED
            - AUTOMATICALLY_SCORABLE
            - AUTOMATICALLY_SCORABLE_WITH_COUNTBACK
          description: AUTOMATICALLY_SCORABLE_WITH_COUNTBACK means the package is able to compute a final score,
            taking into account previous submissions to this question.
        penalty:
          type: number
          nullable: true
          format: double
          description: Penalty factor (fraction that is subtracted from the score after each failed attempt,
            might be used when package cannot compute a final score).
        random_guess_score:
          type: number
          nullable: true
          format: double
          description: Average expected score when the response is just selected randomly.
        subquestions:
          type: array
          nullable: true
          description: Listing of subquestions if the question consists of subquestions.
          items:
            type: object
            properties:
              subquestion_id:
                type: string
                maxLength: 30
              score_max:
                type: number
                format: double
                nullable: true
                description: Maximum score. May be null if no score can be assigned directly to this
                  specific subquestion.
              response_classes:
                type: array
                nullable: true
                description: All the possible types of responses per subquestion. This is used for
                  statistics in order to classify responses. Can be null if question does not
                  support a response analysis.
                items:
                  type: object
                  properties:
                    response_class:
                      type: string
                      maxLength: 30
                    score:
                      type: number
                      format: double
                  required: [ response_class, score ]
            required: [ subquestion_id, score_max, response_classes ]
        response_analysis_by_variant:
          type: boolean
          description: If true, the LMS should break down the stats and response analysis by the question variant.
        render_every_view:
          type: boolean
          description: The question UI should not be cached and every view should be rendered by the package.
          default: false
        general_feedback:
          type: string
          nullable: true
          description: General feedback that is shown to everyone after scoring.
      required: [ num_variants, num_subquestions, score_min,
                  score_max, scoring_method, penalty, random_guess_score, subquestions,
                  response_analysis_by_variant, render_every_view, general_feedback ]

    QuestionCreated:
      allOf:
        - $ref: '#/components/schemas/Question'
        - type: object
          properties:
            question_state:
              type: string
              description: Arbitrary values set by the question package code (LMS must store this data unmodified)
          required: [ question_state ]

    AttemptStartArguments:
      allOf:
        - $ref: "#/components/schemas/RequestBaseData"
        - type: object
          properties:
            variant:
              type: integer
              minimum: 1
              description: Which variant of this question to start, between 1 and question.num_variants.
          required: [ variant ]

    Attempt:
      type: object
      properties:
        variant:
          type: integer
          minimum: 1
          description: Which variant of this question, between 1 and question.num_variants.
        question_summary:
          type: string
          nullable: true
          default: null
          description: Plain-text summary of the question.
        right_answer_summary:
          type: string
          nullable: true
          default: null
          description: Plain-text summary of the right answer.
        ui:
          type: object
          properties:
            fields:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
                    description: Type of the input field.
                  default:
                    type: string
                    nullable: true
                  validation_regex:
                    type: string
                    nullable: true
                    description: Validate response with this regex. If the response does not match, the response might not be scorable.
                  required:
                    type: boolean
                    description: This field is required. Otherwise the response will not be scorable.
                  correct_response:
                    type: string
                    nullable: true
                required: [ name, type, default, validation_regex, required, correct_response ]
            text:
              type: string
              format: text/html
              description: Answer input area
              example: '<label>Enter your answer: <input type="text"/></label>'
            include_inline_css:
              type: string
              nullable: true
            include_css_file:
              type: string
              nullable: true
            include_javascript_modules:
              type: array
              default: [ ]
              items:
                type: string
            call_javascript:
              type: array
              default: [ ]
              items:
                type: object
                properties:
                  module:
                    type: string
                  function:
                    type: string
                  args:
                    type: string
                required: [ module, function, args ]
            files:
              type: array
              default: [ ]
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: file name
                  data:
                    type: string
                    format: base64
                    description: file data
                  mime_type:
                    type: string
                    nullable: true
                required: [ name, data, mime_type ]
          required: [ fields, text ]
          readOnly: true
      required: [ variant, ui ]

    AttemptStarted:
      allOf:
        - type: object
          properties:
            attempt_state:
              type: string
              description: Arbitrary values set by the question package code (LMS must store this data unmodified).
          required: [ attempt_state ]
        - $ref: "#/components/schemas/Attempt"

    AttemptViewArguments:
      allOf:
        - $ref: "#/components/schemas/RequestBaseData"
        - type: object
          properties:
            attempt_ref:
              $ref: 'qppe-lms.yaml#/components/schemas/AttemptRef'
            attempt_state:
              type: string
              description: Arbitrary values set by the question package code.
            response_ref:
              $ref: 'qppe-lms.yaml#/components/schemas/ResponseRef'
            scoring_state:
              type: string
              nullable: true
              description: Arbitrary values set by the question package code (has to be passed
                when the attempt was already scored).
            response:
              type: object
              nullable: true
              description: Data from the question's input fields.
          required: [ attempt_ref, attempt_state, response_ref, scoring_state, response ]

    AttemptScoreArguments:
      allOf:
        - $ref: "#/components/schemas/RequestBaseData"
        - $ref: "#/components/schemas/AttemptViewArguments"
        - type: object
          properties:
            timeout:
              type: number
              minimum: 0
              nullable: true
              description: Maximum time to wait in seconds for scoring the attempt synchronously. When the timeout is
                reached, the server will score the attempt in background and push the score to the LMS (asynchronous
                scoring). Null if there should be no timeout (only synchronous scoring) or
                zero for asynchronous scoring only.
            try_scoring_with_countback:
              type: boolean
              description: Try to compute a final score, taking into account previous submissions to this question
                (only when question.scoring_method is AUTOMATICALLY_SCORABLE_WITH_COUNTBACK).
            generate_hint:
              type: boolean
              description: Try to give a hint on how to improve the response.
          required: [ timeout, try_scoring_with_countback, generate_hint ]

    AttemptScored:
      allOf:
        - type: object
          properties:
            scoring_state:
              type: string
              nullable: true
              description: Arbitrary values set by the question package code (LMS must store this data unmodified).
            scoring_code:
              type: string
              enum:
                - AUTOMATICALLY_SCORED
                - NEEDS_MANUAL_SCORING
                - RESPONSE_NOT_SCORABLE
                - INVALID_RESPONSE
            score:
              type: number
              nullable: true
              format: double
              description: A fraction between question.score_min_fraction and question.score_max_fraction.
            specific_feedback:
              type: string
              nullable: true
              default: null
              description: Might be null when there is no specific feedback or the specific feedback is shown inline
                within the question text.
            hint:
              type: string
              nullable: true
              default: null
              description: Null if LMS has not requested a hint in AttemptScoreArguments.generate_hint or if no
                hint is available.
            more_hints_available:
              type: boolean
              nullable: true
              default: null
              description: The question package is able to give at least one more hint. Null if no hint has been
                requested or if the package is not able to tell whether there are more hints.
            response_summary:
              type: string
              nullable: true
              default: null
              description: This is a plain-text summary of the response.
            classification:
              type: array
              nullable: true
              default: null
              description: Classified response per subquestion. Can be null if question does not support
                a response analysis. Must correspond to question.subquestions.
              items:
                type: object
                properties:
                  subquestion_id:
                    type: string
                    maxLength: 30
                  response_class:
                    type: string
                    maxLength: 30
                  response:
                    type: string
                    description: Actual response to this subquestion given by user.
                  score:
                    type: number
                    format: double
                required: [ subquestion_id, response_class, response, score ]
            scored_fields:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  name:
                    type: string
                  correct:
                    type: boolean
                    nullable: true
                  score:
                    type: number
                    format: double
                    nullable: true
                  max_score:
                    type: number
                    format: double
                    nullable: true
                  feedback:
                    type: string
                    nullable: true
                required: [ name, correct, score, max_score, feedback ]
              description: Give specific feedback
          required: [ scoring_state, scoring_code, score ]
        - $ref: "#/components/schemas/Attempt"

    AttemptAsyncScoringStatus:
      type: object
      properties:
        job_status:
          type: string
          enum:
            - WAITING
            - RUNNING
            - FINISHED
            - ERROR
          description: >
            * `WAITING` - The job is still waiting for being executed.
            * `RUNNING` - The job is now running.
            * `FINISHED` - The job finished successfully.
            * `ERROR` - An error occurred.
      required: [ job_status ]

    AttemptAsyncScoringStatusFinished:
      type: object
      allOf:
        - $ref: "#/components/schemas/AttemptAsyncScoringStatus"
        - $ref: "#/components/schemas/AttemptScored"

    AttemptAsyncScoringStatusError:
      type: object
      allOf:
        - $ref: "#/components/schemas/AttemptAsyncScoringStatus"
        - $ref: "#/components/schemas/RequestError"

    RequestError:
      type: object
      properties:
        error_code:
          type: string
          enum:
            - QUEUE_WAITING_TIMEOUT
            - WORKER_TIMEOUT
            - OUT_OF_MEMORY
            - INVALID_PACKAGE
            - INVALID_REQUEST
            - PACKAGE_ERROR
            - CALLBACK_API_ERROR
            - SERVER_ERROR
          description: >
            * `QUEUE_WAITING_TIMEOUT` - The request has been waiting too long in a job queue. Try again later.
            * `WORKER_TIMEOUT` - Question package did not answer in a reasonable amount of time.
            * `OUT_OF_MEMORY` - Question package reached its memory limit.
            * `INVALID_PACKAGE` - The package file is corrupt, the manifest is invalid or there is a checksum mismatch.
            * `INVALID_REQUEST` - Invalid request body.
            * `PACKAGE_ERROR` - An error occurred within the package.
            * `CALLBACK_API_ERROR` - An error occurred while contacting the LMS Callback API.
            * `SERVER_ERROR` - Some other server error has occurred.
        temporary:
          type: boolean
          description: Tells if this is a temporary error and if the LMS should try the request later again.
        reason:
          type: string
          nullable: true
          default: null
          description: Optional human-readable reason for the error.
      required: [ error_code, temporary ]

    NotFoundStatus:
      type: object
      properties:
        what:
          type: string
          enum:
            - PACKAGE
            - QUESTION_STATE
          description: >
            * `PACKAGE` - Could not find the requested package.
            * `QUESTION_STATE` - Could not find the question_state.
      required: [ what ]

    QuestionStateMigrationError:
      type: object
      properties:
        error_code:
          type: string
          enum:
            - NOT_IMPLEMENTED
            - DOWNGRADE_NOT_POSSIBLE
            - PACKAGE_MISMATCH
            - CURRENT_QUESTION_STATE_INVALID
            - MAJOR_VERSION_MISMATCH
            - OTHER_ERROR
        reason:
          type: string
          nullable: true
          default: null
          description: Human-readable reason why the error occurred.
      required: [ error_code ]

    FormLabel:
      type: string
      description: The displayed label for this form element
    FormName:
      type: string
      pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$'
      description: The key of the form data field produced by this form element
    FormHelp:
      type: string
      description: Help text to be shown when a help button is clicked
      nullable: true

    FormReference:
      type: string
      pattern: '^([a-zA-Z_][a-zA-Z0-9_]*|\.\.)(\[([a-zA-Z_][a-zA-Z0-9_]*|\.\.)\])*$'
      description: Relative reference to a form element, where '..' refers to the parent element
    FormCondition:
      description: Hide or disable this element depending on the state of another element
      oneOf:
        - type: object
          description: Condition on a checkbox being (un)checked
          properties:
            kind:
              type: string
              enum: [ is_checked, is_not_checked ]
            name:
              $ref: "#/components/schemas/FormReference"
          required: [ kind, name ]
        - type: object
          description: Condition on the value of another field (not) being equal to some static value
          properties:
            kind:
              type: string
              enum: [ equals, does_not_equal ]
            name:
              $ref: "#/components/schemas/FormReference"
            value:
              oneOf:
                - type: string
                - type: integer
                - type: boolean
          required: [ kind, name, value ]
        - type: object
          description: Condition on the value of another field being one of a number of static values
          properties:
            kind:
              type: string
              enum: [ in ]
            name:
              $ref: "#/components/schemas/FormReference"
            value:
              type: array
              items:
                oneOf:
                  - type: string
                  - type: integer
                  - type: boolean
          required: [ kind, name, value ]

    StaticTextElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ static_text ]
        label:
          $ref: "#/components/schemas/FormLabel"
        text:
          type: string
          description: Static text to display
        disable_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        hide_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        help:
          $ref: "#/components/schemas/FormHelp"
      required: [ kind, label, text ]

    TextInputElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ input ]
        label:
          $ref: "#/components/schemas/FormLabel"
        name:
          $ref: "#/components/schemas/FormName"
        required:
          type: boolean
          default: false
        default:
          type: string
          description: The initial value in this element, if any
          nullable: true
          default: null
        placeholder:
          type: string
          description: Text to show while no value is entered
          nullable: true
          default: null
        disable_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        hide_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        help:
          $ref: "#/components/schemas/FormHelp"
      required: [ kind, label, name ]

    CheckboxElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ checkbox ]
        left_label:
          type: string
          description: A label displayed to the left of the checkbox
          nullable: true
          default: null
        right_label:
          type: string
          description: A label displayed to the right of the checkbox
          nullable: true
          default: null
        name:
          $ref: "#/components/schemas/FormName"
        required:
          type: boolean
          default: false
        selected:
          type: boolean
          description: Whether this checkbox is initially selected
          default: false
        disable_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        hide_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        help:
          $ref: "#/components/schemas/FormHelp"
      required: [ kind, name ]

    CheckboxGroupElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ checkbox_group ]
        name:
          $ref: "#/components/schemas/FormName"
        checkboxes:
          type: array
          items:
            $ref: "#/components/schemas/CheckboxElement"
          minItems: 1
      required: [ kind, checkboxes ]

    RadioGroupElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ radio_group ]
        label:
          $ref: "#/components/schemas/FormLabel"
        name:
          $ref: "#/components/schemas/FormName"
        options:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              value:
                type: string
              selected:
                type: string
                description: Whether this option is initially selected
                default: false
            required: [ label, value ]
          minItems: 1
        required:
          type: boolean
          default: false
        disable_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        hide_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        help:
          $ref: "#/components/schemas/FormHelp"
      required: [ kind, label, name, options ]

    SelectElement:
      type: object
      properties:
        kind:
          type: string
          enum: [ select ]
        label:
          $ref: "#/components/schemas/FormLabel"
        name:
          $ref: "#/components/schemas/FormName"
        options:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              value:
                type: string
              selected:
                type: boolean
                description: Whether this option is initially selected
                default: false
            required: [ label, value ]
          minItems: 1
        multiple:
          type: boolean
          default: false
        required:
          type: boolean
          default: false
        disable_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        hide_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        help:
          $ref: "#/components/schemas/FormHelp"
      required: [ kind, label, name, options ]

    HiddenElement:
      type: object
      description: Pseudo-element which is not shown at all but adds a fixed value to the form data
      properties:
        kind:
          type: string
          enum: [ hidden ]
        name:
          $ref: "#/components/schemas/FormName"
        value:
          type: string
        disable_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        hide_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
      required: [ kind, name, value ]

    GroupElement:
      type: object
      description: Groups arbitrary elements with a common label
      properties:
        kind:
          type: string
          enum: [ group ]
        label:
          $ref: "#/components/schemas/FormLabel"
        elements:
          type: array
          items:
            $ref: "#/components/schemas/FormElement"
          minItems: 1
        disable_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        hide_if:
          type: array
          items:
            $ref: "#/components/schemas/FormCondition"
          default: [ ]
        help:
          $ref: "#/components/schemas/FormHelp"
      required: [ kind, label, elements ]

    RepetitionElement:
      type: object
      description: Repeats one or more elements a variable number of times, with a button to add more repetitions
      properties:
        kind:
          type: string
          enum: [ repetition ]
        name:
          $ref: "#/components/schemas/FormName"
        initial_elements:
          type: integer
          description: Number of repetitions to show when the form is first loaded
          minimum: 0
        increment:
          type: integer
          description: Number of repetitions to add with each click of the button
          minimum: 1
        button_label:
          type: string
          description: Label for the button that adds more repetitions. Omit to use default provided by LMS
          default: null
          nullable: true
        elements:
          type: array
          description: Elements to repeat
          items:
            $ref: "#/components/schemas/FormElement"
          minItems: 1
      required: [ kind, name, initial_elements, increment, elements ]

    FormElement:
      oneOf:
        - $ref: "#/components/schemas/StaticTextElement"
        - $ref: "#/components/schemas/TextInputElement"
        - $ref: "#/components/schemas/CheckboxElement"
        - $ref: "#/components/schemas/CheckboxGroupElement"
        - $ref: "#/components/schemas/RadioGroupElement"
        - $ref: "#/components/schemas/SelectElement"
        - $ref: "#/components/schemas/HiddenElement"
        - $ref: "#/components/schemas/GroupElement"
        - $ref: "#/components/schemas/RepetitionElement"

    FormSection:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/FormName"
        header:
          type: string
        elements:
          type: array
          items:
            $ref: "#/components/schemas/FormElement"
      required: [ name, header, elements ]

    ServerStatus:
      type: object
      properties:
        name:
          type: string
          example: questionpy-server
        version:
          type: string
          format: semver
          # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          example: 0.1.0
        allow_lms_packages:
          type: boolean
          example: true
        max_package_size:
          type: integer
          description: Maximum package size (in bytes)
        usage:
          $ref: "#/components/schemas/Usage"
      required: [name, version, allow_lms_packages, max_package_size]

    Usage:
      type: object
      description: Current usage of request handlers
      properties:
        requests_in_process:
          type: integer
          description: Amount of requests being processed
        requests_in_queue:
          type: integer
          description: Amount of requests waiting to be processed
      required: [requests_in_process, requests_in_queue]
